name: CI

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/**'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  # Force colored output in CI
  FORCE_COLOR: 1

jobs:
  test-fpm:
    name: Test with FPM (gcc-${{ matrix.gcc-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        gcc-version: [11, 12, 13]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history for version generation

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: ${{ matrix.gcc-version }}

      - name: Setup FPM
        uses: fortran-lang/setup-fpm@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies (libcurl, OpenSSL)
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev

      - name: Build with FPM
        run: fpm build --verbose

      - name: Run tests with FPM
        env:
          S3_DISABLE_LIBCURL: 1
        run: |
          chmod +x test/scripts/curl
          PATH="${PWD}/test/scripts:$PATH" fpm test --verbose

      - name: Run example with FPM
        run: fpm run --verbose

  test-cmake:
    name: Test with CMake (${{ matrix.build-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        build-type: [Debug, Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Install dependencies (libcurl, OpenSSL)
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev

      - name: Configure CMake
        run: |
          cmake -B build \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_Fortran_COMPILER=gfortran

      - name: Build with CMake
        run: cmake --build build --config ${{ matrix.build-type }} --verbose

      - name: Run CMake tests
        working-directory: build
        run: ctest --output-on-failure --verbose

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Install FORD
        run: |
          python -m pip install --upgrade pip
          pip install ford

      - name: Build documentation
        run: ford docs/ford.md

      - name: Upload documentation artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/generated/

      - name: Setup Pages
        if: github.event_name == 'push'
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push'
        uses: actions/deploy-pages@v4

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Install dependencies (libcurl, OpenSSL)
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev

      - name: Check compilation with strict flags
        run: |
          gfortran -c -Wall -Wextra -Werror -std=f2008 \
                   -fcheck=all -fbacktrace \
                   src/s3_logger.f90 \
                   src/s3_errors.f90 \
                   src/curl_stream.f90 \
                   src/openssl_bindings.f90 \
                   src/aws_auth.f90 \
                   src/libcurl_bindings.f90 \
                   src/s3_http.f90 \
                   src/s3_io.f90 \
                   -lssl -lcrypto

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" src/ --include="*.f90" --include="*.F90"; then
            echo "Warning: Found TODO/FIXME comments"
            exit 0
          fi

  netcdf-integration:
    name: NetCDF Integration Example (optional)
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't block PRs if this fails

    steps:
      - uses: actions/checkout@v4

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Install NetCDF and libcurl
        run: |
          sudo apt-get update
          sudo apt-get install -y libnetcdf-dev libnetcdff-dev libcurl4-openssl-dev libssl-dev

      - name: Verify NetCDF installation
        run: |
          nf-config --version
          pkg-config --modversion netcdf

      - name: Compile NetCDF integration example
        run: |
          gfortran -o netcdf_example \
            src/s3_logger.f90 \
            src/s3_errors.f90 \
            src/curl_stream.f90 \
            src/openssl_bindings.f90 \
            src/aws_auth.f90 \
            src/libcurl_bindings.f90 \
            src/s3_http.f90 \
            examples/netcdf_minimal.f90 \
            $(nf-config --fflags) $(nf-config --flibs) -lcurl -lssl -lcrypto

      - name: Run NetCDF example
        env:
          S3_LOG_LEVEL: INFO
        run: |
          ./netcdf_example

  integration-tests:
    name: Integration Tests (Real S3 + MinIO)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev curl

      - name: Start MinIO container
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -p 9001:9001 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio:latest server /data \
            --console-address ":9001"

      - name: Wait for MinIO to be healthy
        run: |
          echo "Waiting for MinIO to start..."
          for i in {1..30}; do
            if curl -f http://localhost:9000/minio/health/live 2>/dev/null; then
              echo "MinIO is ready!"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          echo "MinIO failed to start"
          docker logs minio
          exit 1

      - name: Setup FPM
        uses: fortran-lang/setup-fpm@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build all executables
        run: fpm build --verbose

      - name: Setup MinIO test bucket and data
        run: |
          # Install MinIO client
          wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc

          # Configure MinIO client
          ./mc alias set local http://localhost:9000 minioadmin minioadmin

          # Create test bucket
          ./mc mb local/test-bucket

          # Upload test files with different sizes and content
          echo "Hello from MinIO!" > test-small.txt
          ./mc cp test-small.txt local/test-bucket/test.txt

          # Create a larger test file (~1MB)
          dd if=/dev/urandom of=test-medium.bin bs=1024 count=1024 2>/dev/null
          ./mc cp test-medium.bin local/test-bucket/data/medium.bin

          # Create a multi-line text file for s3_read_line testing
          cat > test-multiline.txt <<EOF
          Line 1: First line of test data
          Line 2: Second line of test data
          Line 3: Third line with special chars: !@#$%
          Line 4: Fourth line
          Line 5: Final line
          EOF
          ./mc cp test-multiline.txt local/test-bucket/multiline.txt

          # Create some nested structure
          echo "nested data" > test-nested.txt
          ./mc cp test-nested.txt local/test-bucket/path/to/nested.txt

          # Verify all uploads
          echo "MinIO bucket contents:"
          ./mc ls -r local/test-bucket/

      - name: Run test_simple.f90 (ESGF public bucket)
        env:
          S3_LOG_LEVEL: INFO
        run: |
          fpm run test_simple
        continue-on-error: true  # ESGF may be unreliable

      - name: Run test_streaming.f90 (ESGF public bucket)
        env:
          S3_LOG_LEVEL: DEBUG
        run: |
          fpm run test_streaming
        continue-on-error: true  # ESGF may be unreliable

      - name: Run file_download_demo.f90 (httpbin.org)
        run: |
          fpm run file_download_demo

      - name: Run progress_demo.f90 (httpbin.org)
        run: |
          fpm run progress_demo

      - name: Test MinIO connectivity
        run: |
          # Simple test that MinIO is accessible
          curl -f http://localhost:9000/minio/health/live

      - name: Run test_minio.f90 (MinIO integration)
        env:
          S3_LOG_LEVEL: INFO
        run: |
          # Dedicated test against MinIO with all test data
          fpm run test_minio

      - name: Run auth_demo with MinIO
        env:
          S3_LOG_LEVEL: INFO
        run: |
          # The auth_demo will try MinIO as example 3
          fpm run auth_demo || true
        continue-on-error: true  # Expected to show connection attempts