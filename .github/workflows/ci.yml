name: CI

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/**'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  # Force colored output in CI
  FORCE_COLOR: 1

jobs:
  test-fpm:
    name: Test with FPM (${{ matrix.os }}, gcc-${{ matrix.gcc-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15-intel, windows-latest]
        gcc-version: [11, 12, 13]
        exclude:
          # Reduce matrix size - test key combinations only
          - os: macos-15-intel
            gcc-version: 11
          - os: macos-15-intel
            gcc-version: 13  # Pre-built FPM binary requires gcc@12 and Intel
          - os: windows-latest
            gcc-version: 11

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history for version generation

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: ${{ matrix.gcc-version }}

      - name: Setup FPM
        uses: fortran-lang/setup-fpm@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup library paths for macOS FPM (Intel)
        if: matrix.os == 'macos-15-intel'
        run: |
          # Pre-built FPM expects Homebrew gcc@12 paths, create symlinks to actual location
          echo "Searching entire system for libgfortran.5.dylib..."
          ACTUAL_LIB=$(find /usr /opt /Library 2>/dev/null | grep -E 'libgfortran\.5\.dylib$' | head -1 | xargs dirname)

          if [ -z "$ACTUAL_LIB" ]; then
            echo "ERROR: Could not find libgfortran.5.dylib anywhere!"
            echo "Trying otool to see where gfortran links:"
            otool -L $(which gfortran) || true
            exit 1
          fi

          echo "Found library directory at: $ACTUAL_LIB"
          ls -la "$ACTUAL_LIB"

          sudo mkdir -p /usr/local/opt/gcc@12/lib/gcc/12
          sudo ln -sf ${ACTUAL_LIB}/libgfortran.5.dylib /usr/local/opt/gcc@12/lib/gcc/12/libgfortran.5.dylib
          sudo ln -sf ${ACTUAL_LIB}/libquadmath.0.dylib /usr/local/opt/gcc@12/lib/gcc/12/libquadmath.0.dylib
          sudo ln -sf ${ACTUAL_LIB}/libgcc_s.1.1.dylib /usr/local/opt/gcc@12/lib/gcc/12/libgcc_s.1.1.dylib || true

          echo "Created symlinks:"
          ls -la /usr/local/opt/gcc@12/lib/gcc/12/

      - name: Build with FPM
        run: fpm build --verbose

      - name: Run tests with FPM
        shell: bash
        run: |
          chmod +x test/scripts/curl
          PATH="${PWD}/test/scripts:$PATH" fpm test --verbose

      - name: Run example with FPM
        run: fpm run --verbose

  test-cmake:
    name: Test with CMake (${{ matrix.os }}, ${{ matrix.build-type }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build-type: [Debug, Release]
        exclude:
          # Reduce matrix - test Release on all, Debug on Linux only
          - os: macos-latest
            build-type: Debug
          - os: windows-latest
            build-type: Debug

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Configure CMake
        shell: bash
        run: |
          cmake -B build \
                ${{ runner.os == 'Windows' && '-G "MinGW Makefiles"' || '' }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_Fortran_COMPILER=gfortran

      - name: Build with CMake
        run: cmake --build build --config ${{ matrix.build-type }} --verbose

      - name: Run CMake tests
        working-directory: build
        run: ctest --output-on-failure --verbose

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Install FORD
        run: |
          python -m pip install --upgrade pip
          pip install ford

      - name: Build documentation
        run: ford docs/ford.md

      - name: Upload documentation artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/generated/

      - name: Setup Pages
        if: github.event_name == 'push'
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push'
        uses: actions/deploy-pages@v4

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Check compilation with strict flags
        run: |
          gfortran -c -Wall -Wextra -Werror -std=f2008 \
                   -fcheck=all -fbacktrace \
                   src/s3_logger.f90 \
                   src/curl_stream.f90 \
                   src/s3_http.f90 \
                   src/s3_io.f90

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" src/ --include="*.f90" --include="*.F90"; then
            echo "Warning: Found TODO/FIXME comments"
            exit 0
          fi

  netcdf-integration:
    name: NetCDF Integration Example (optional)
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't block PRs if this fails

    steps:
      - uses: actions/checkout@v4

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Install NetCDF
        run: |
          sudo apt-get update
          sudo apt-get install -y libnetcdf-dev libnetcdff-dev

      - name: Verify NetCDF installation
        run: |
          nf-config --version
          pkg-config --modversion netcdf

      - name: Compile NetCDF integration example
        run: |
          gfortran -o netcdf_example \
            src/s3_logger.f90 \
            src/curl_stream.f90 \
            src/s3_http.f90 \
            examples/netcdf_minimal.f90 \
            $(nf-config --fflags) $(nf-config --flibs)

      - name: Run NetCDF example
        env:
          S3_LOG_LEVEL: INFO
        run: |
          ./netcdf_example