#!/usr/bin/env python3
"""
Mock curl script for testing S3 operations.
Cross-platform replacement for bash/batch curl mocks.
"""

import sys
import os
from pathlib import Path
import shutil


def parse_curl_args(args):
    """Parse curl command-line arguments."""
    output_file = None
    url = None
    is_head = False
    is_put = False
    is_delete = False
    data_file = None
    byte_range = None

    i = 0
    while i < len(args):
        arg = args[i]

        if arg == "-o" and i + 1 < len(args):
            output_file = args[i + 1]
            i += 2
        elif arg == "-r" and i + 1 < len(args):
            byte_range = args[i + 1]
            i += 2
        elif arg == "-I":
            is_head = True
            i += 1
        elif arg == "-X" and i + 1 < len(args):
            method = args[i + 1]
            if method == "PUT":
                is_put = True
            elif method == "DELETE":
                is_delete = True
            i += 2
        elif arg == "--data-binary" and i + 1 < len(args):
            data_file = args[i + 1].lstrip("@")
            i += 2
        elif arg in ("-s", "-S"):
            i += 1
        elif "://" in arg:
            url = arg
            i += 1
        else:
            i += 1

    return {
        "output_file": output_file,
        "url": url,
        "is_head": is_head,
        "is_put": is_put,
        "is_delete": is_delete,
        "data_file": data_file,
        "byte_range": byte_range
    }


def extract_key_from_url(url):
    """Extract object key from S3 URL."""
    if not url:
        return None

    # URL format: https://bucket.s3.amazonaws.com/key
    # Extract everything after the last /
    parts = url.rstrip("/").split("/")
    if len(parts) > 0:
        return parts[-1]
    return None


def main():
    # Get response directory
    script_dir = Path(__file__).parent
    response_dir = script_dir / ".." / "data" / "responses"
    response_dir = response_dir.resolve()

    # Parse arguments
    parsed = parse_curl_args(sys.argv[1:])
    key = extract_key_from_url(parsed["url"])

    # Handle HEAD requests
    if parsed["is_head"]:
        head_file = response_dir / f"head_{key}"
        if head_file.exists():
            print(head_file.read_text(), end="")
            sys.exit(0)
        else:
            sys.exit(22)  # 404 not found

    # Handle PUT requests
    if parsed["is_put"]:
        sys.exit(0)  # Mock successful upload

    # Handle DELETE requests
    if parsed["is_delete"]:
        if key == "delete_failure_test.txt":
            sys.exit(22)
        sys.exit(0)

    # Handle GET requests
    if parsed["output_file"]:
        output_path = Path(parsed["output_file"])

        # Create parent directory if it doesn't exist (handles /tmp on Windows)
        output_path.parent.mkdir(parents=True, exist_ok=True)

        # Special test cases
        if key == "network_failure_test.txt":
            sys.exit(7)  # Connection failure
        elif key == "timeout_test.txt":
            sys.exit(28)  # Timeout
        elif key == "malformed_response.txt":
            malformed = response_dir / "malformed.xml"
            if malformed.exists():
                shutil.copy(malformed, output_path)
                sys.exit(0)

        # Normal response file
        response_file = response_dir / key
        if response_file.exists():
            # Handle byte range if specified
            if parsed["byte_range"]:
                try:
                    # Parse range (format: "start-end")
                    parts = parsed["byte_range"].split("-")
                    if len(parts) == 2:
                        start = int(parts[0])
                        end = int(parts[1])

                        # Read full file
                        full_content = response_file.read_bytes()

                        # Extract range (end is inclusive in HTTP ranges)
                        # Clamp to file size
                        end = min(end, len(full_content) - 1)
                        if start <= end and start < len(full_content):
                            range_content = full_content[start:end+1]
                            output_path.write_bytes(range_content)
                        else:
                            # Invalid range - return full file
                            output_path.write_bytes(full_content)
                        sys.exit(0)
                except (ValueError, IndexError):
                    # Invalid range format - return full file
                    shutil.copy(response_file, output_path)
                    sys.exit(0)
            else:
                # No range - copy full file
                shutil.copy(response_file, output_path)
                sys.exit(0)
        else:
            # Return NoSuchKey error
            nosuchkey = response_dir / "nosuchkey.xml"
            if nosuchkey.exists():
                shutil.copy(nosuchkey, output_path)
            else:
                # Fallback NoSuchKey response
                output_path.write_text(
                    '<?xml version="1.0" encoding="UTF-8"?>\n'
                    '<Error><Code>NoSuchKey</Code>'
                    '<Message>The specified key does not exist.</Message>'
                    f'<Key>{key}</Key></Error>\n'
                )
            sys.exit(0)

    # Unsupported operation
    print("Mock curl: Unsupported operation", file=sys.stderr)
    sys.exit(1)


if __name__ == "__main__":
    main()
